# NOTE: update this with your service name
service: amcp-chess-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-central-1

  environment:
    UsersTableName: Users-${self:custom.stage}
    QuickPairingTableName: QuickPairing-${self:custom.stage}
    GamesArchiveTableName: GamesArchive-${self:custom.stage}
    OpenRoomsTableName: OpenRooms-${self:custom.stage}
    HiddenRoomsTableName: HiddenRooms-${self:custom.stage}
    WebSocketConnectionsTableName: WebSocketConnections-${self:custom.stage}
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  sampleEnvVar: ${env:SAMPLE_ENV_VAR}
  iamManagedPolicies:
    - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - cloudwatch:*
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ Users, Arn ]
        - "Fn::GetAtt": [ QuickPairing, Arn ]
        - "Fn::GetAtt": [ GamesArchive, Arn ]
        - "Fn::GetAtt": [ OpenRooms, Arn ]
        - "Fn::GetAtt": [ HiddenRooms, Arn ]

functions:
  list-quick-pairing:
    # Defines an HTTP API endpoint that calls the main function in list-quick-pairing.js
    # - path: url path is /games/quick
    # - method: GET request
    handler: list-quick-pairing.main
    events:
      - http:
          path: games/quick
          method: get
          cors: true
          authorizer: aws_iam
  add-quick-pairing:
    # Defines an HTTP API endpoint that calls the main function in add-quick-pairing.js
    # - path: url path is /games/quick
    # - method: POST request
    handler: add-quick-pairing.main
    events:
      - http:
          path: games/quick
          method: post
          cors: true
          authorizer: aws_iam
  list-games:
    # Defines an HTTP API endpoint that calls the main function in list-games.js
    # - path: url path is /games
    # - method: POST request
    handler: list-games.main
    events:
      - http:
          path: games
          method: get
          cors: true
          authorizer: aws_iam
  create-game:
    # Defines an HTTP API endpoint that calls the main function in add-quick-pairing.js
    # - path: url path is /games
    # - method: POST request
    handler: create-game.main
    events:
      - http:
          path: games
          method: post
          cors: true
          authorizer: aws_iam
  connect:
    handler: websocket/connect.main
    events:
    - websocket: $connect
  send-gameid:
    handler: websocket/send-gameid.main
    events:
    - websocket:
        route: send-gameid
  send-message:
    handler: websocket/send-message.main
    events:
    - websocket:
        route: send-message
  disconnect:
    handler: websocket/disconnect.main
    events:
    # - websocket: $disconnect
    - http:
        path: games/{id}
        method: delete
        cors: true
        authorizer: aws_iam
  genUsers:
    handler: generators/UsGen.main
    events:
    - http:
        path: test/generateUsers
        method: post
        cors: true
        authorizer: aws_iam
  genConnections:
    handler: generators/genConnections.main
    events:
    - http:
        path: test/genConnections
        method: post
        cors: true
        authorizer: aws_iam
  # getConnectionId:
  #   handler: websocket/get-connectionid.js
  #   events:
  #   - websocket:
  #       route: getConnectionId
  # sendIdentity:
  #   handler: sendIdentity.main
  #   events:
  #   - http:
  #       path: games/{id}
  #       method: post
  #       cors: true
  #       authorizer: aws_iam


resources:
  # API Gateway Errors
  # - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-tables.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
